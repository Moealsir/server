
#github data
gituser=''
gitmail=''
token=''









#Auto completetion for bash shell for default user:

# Check if ble.sh is installed
if [ ! -d "$HOME/ble.sh" ]; then
    # Clone the repository and build ble.sh
    git clone --recursive https://github.com/akinomyoga/ble.sh.git $HOME/ble.sh
    make -C $HOME/ble.sh
fi

# Source ble.sh
source $HOME/ble.sh/out/ble.sh


#Functions
# function to insert name and email of GitHub
gtc() {
    git config --global user.name "$gituser"
    git config --global user.email "$gitmail"
    echo "Git global configuration set to Name: $gituser, Email: $gitmail"
}




#clone any repo

gcl() {
    git clone https://$token@github.com/$gituser/$1.git
    cd $1
}


#echo
e() {
     echo "$1" > "$2"
}

#append
ea() {
    echo "$1" >> "$2"
}

#git add commit push
g() {
    git pull
    git add .
    git commit -m "$@"
    git push
}


#make di and cd dir
m() {
   mkdir -v -p $1
   cd $1
}

unzip () {
    unzip $1
    cd $1
}


#navigator
re() {
    if [ "$#" -eq 1 ]; then
        # Use the provided path number as an argument and change directory
        eval "$(dir_navigator.sh "$1")"
    else
        while true; do
            # Display directory history
            dir_navigator.sh

            # Prompt the user
            echo "Enter a number to change directory, 'c' to clear history, 'd' to delete, or 'q' to quit."
            read choice

            if [ "$choice" == "q" ]; then
                break
            elif [ "$choice" == "c" ]; then
                echo "" > ~/.dir_history
            elif [ "$choice" == "d" ]; then
                # Request user input for paths to delete
                echo "Enter the numbers of paths to delete (separated by space), or 'q' to quit:"
                read delete_choices

                if [ "$delete_choices" == "q" ]; then
                    break
                else
                    # Reverse ~/.dir_history in a temp file
                    tac "$DIR_HISTORY_FILE" > "$DIR_HISTORY_FILE.tmp"

                    # Delete the selected lines
                    IFS=" " read -ra delete_numbers <<< "$delete_choices"
                    delete_numbers=($(echo "${delete_numbers[@]}" | tr ' ' '\n' | sort -nr))
                    for num in "${delete_numbers[@]}"; do
                        sed -i "${num}d" "$DIR_HISTORY_FILE.tmp"
                    done

                    # Reverse the temp file again before updating ~/.dir_history
                    tac "$DIR_HISTORY_FILE.tmp" > "$DIR_HISTORY_FILE"

                    # Remove the temporary file
                    rm "$DIR_HISTORY_FILE.tmp"
                fi
            else
                # Use the choice as an argument and change directory
                eval "$(dir_navigator.sh "$choice")"
                break
            fi
        done
    fi
}

cleanup_dir_history() {
    wait

    # Read the file from the end, remove duplicates, and update the history file
    tac "$DIR_HISTORY_FILE" | awk '!seen[$0]++' | tac > "$DIR_HISTORY_FILE.tmp"
    mv "$DIR_HISTORY_FILE.tmp" "$DIR_HISTORY_FILE"
}

export DIR_HISTORY_FILE="$HOME/.dir_history"

# Append the new directory to the history file whenever 'cd' is used
cd() {
    case "$1" in
        sa) builtin cd /etc/nginx/sites-available ;;
        se) builtin cd /etc/nginx/sites-enabled ;;
        vw) builtin cd /var/www ;;
	sr) builtin cd ~/server ;;
        *) builtin cd "$@" ;;
    esac && echo "$PWD" >> "$DIR_HISTORY_FILE"
}


vi() {
    sudo vi "$@"
}



#Basic aliases
clone_repo() {
    git clone $1
    cd $1
}

run_pycodestyle() {
    if [ "$#" -eq 0 ]; then
        # If no arguments provided, check for *.py files
        if [ -n "$(ls *.py 2>/dev/null)" ]; then
            pycodestyle *.py
        fi
    else
        # If arguments provided, run pycodestyle on specified files
        pycodestyle "$@"
    fi
}


alias cl="clone_repo"
alias q="python3"
alias ob='code ~/.bashrc'
alias sb='source ~/.bashrc'
alias o='code'
alias h='history'
alias i='sudo apt-get install'
alias d='sudo rm -rf'
alias dd='sudo rm -rf /home/siroo/.local/share/Trash/files/*'
alias cx='chmod +x'
alias xx='chmod -x'


#go back to previous directories
alias b='cd ..'
alias bb='cd ../..'
alias b3='cd ../../../'
alias b4='cd ../../../../'
alias b5='cd ../../../../../'


alias qq='run_pycodestyle'
alias s='run_betty'
alias a='q betty_fixer.py'
alias v='valgrind'
alias tc='q -m unittest -v'
alias t='t'


#Git aliases
alias ada='git add *'
alias ad='git add'
alias gb='git branch'
alias st='git status'
alias gco='git checkout'
alias gp='git push'
alias pl='git pull'
